% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rebase.R
\name{git_rebase}
\alias{git_rebase}
\alias{git_rebase_list}
\alias{git_rebase_commit}
\alias{git_cherry_pick}
\title{Cherry-Pick and Rebase}
\usage{
git_rebase_list(upstream = NULL, repo = ".")

git_rebase_commit(upstream = NULL, repo = ".")

git_cherry_pick(commit, repo = ".")
}
\arguments{
\item{upstream}{branch to which you want to rewind and re-apply your
local commits. The default uses the remote upstream branch with the
current state on the git server, simulating \link{git_pull}.}

\item{repo}{The path to the git repository. If the directory is not a
repository, parent directories are considered (see \link{git_find}). To disable
this search, provide the filepath protected with \code{\link[=I]{I()}}.}

\item{commit}{id of the commit to cherry pick}
}
\description{
A cherry-pick applies the changes from a given commit (from another branch)
onto the current branch. A rebase resets the target branch to another branch
(usually the remote upstream) and then re-applies the local changes by
cherry-picking each of the local commits that was not yet in the upstream.
}
\details{
\code{git_rebase_list} shows the commits that need to be cherry-picked to rebase
\code{branch} onto \code{upstream}, including which of these commits will conflict. It
does so by performing a dry-run, without saving any actual changes.
}
