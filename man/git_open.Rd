% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repository.R
\name{git_open}
\alias{git_open}
\alias{git_info}
\title{Open or get metadata about a local repository}
\usage{
git_open(repo = ".")

git_info(repo = ".")
}
\arguments{
\item{repo}{The repository to target, either as a filepath or as an object of
class \code{git_repo_ptr}. If \code{repo} is a filepath and is not a repository, then
its parent directory is considered, then the parent's parent, and so on. To
prevent this recursive search, provide a filepath protected with \code{\link[=I]{I()}}.}
}
\value{
\itemize{
\item \code{git_open()}: An object of class \code{git_repo_ptr}.
\item \code{git_info()}: A named list.
}
}
\description{
\code{git_open()} returns a reference to a local repository, which is a
prerequisite for Git operations. However, most users do not need to make an
explicit call to \code{git_open()} and nor do they need to handle such references.
Most gert functions accept the target repo as a path and open it internally,
as necessary.

\code{git_info()} reveals information about a repository, such as the SHA of the
most recent commit or its refs.
}
\examples{
r <- tempfile(pattern = "gert")
git_init(r)
r_ptr <- git_open(r)
r_ptr
git_open(r_ptr)
git_info(r)

# cleanup
unlink(r, recursive = TRUE)
}
\seealso{
Other git: 
\code{\link{branch}},
\code{\link{commit}()},
\code{\link{fetch}()},
\code{\link{git_config}()},
\code{\link{repository}()},
\code{\link{signature}}
}
\concept{git}
